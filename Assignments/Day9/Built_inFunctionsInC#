## Built-in Functions in C#

1)**String Functions:**

* **`Length`:** Returns the length of the string.
  ```csharp
  string str = "Hello, world!";
  int length = str.Length; // length will be 13
  ```
* **`Substring`:** Extracts a substring from a string.
  ```csharp
  string str = "Hello, world!";
  string substring = str.Substring(0, 5); // substring will be "Hello"
  ```
* **`IndexOf`:** Finds the index of the first occurrence of a character or substring.
  ```csharp
  string str = "Hello, world!";
  int index = str.IndexOf("world"); // index will be 7
  ```
* **`Replace`:** Replaces all occurrences of a substring with another string.
  ```csharp
  string str = "Hello, world!";
  string newStr = str.Replace("world", "there"); // newStr will be "Hello, there!"
  ```
* **`ToUpper` and `ToLower`:** Converts a string to uppercase or lowercase.
  ```csharp
  string str = "Hello, world!";
  string uppercaseStr = str.ToUpper(); // uppercaseStr will be "HELLO, WORLD!"
  string lowercaseStr = str.ToLower(); // lowercaseStr will be "hello, world!"
  ```
* **`Trim`:** Removes leading and trailing whitespace from a string.
  ```csharp
  string str = "  Hello, world!  ";
  string trimmedStr = str.Trim(); // trimmedStr will be "Hello, world!"
  ```

2)**Array Functions:**

* **`Length`:** Returns the length of the array (number of elements).
  ```csharp
  int[] arr = { 1, 2, 3, 4, 5 };
  int length = arr.Length; // length will be 5
  ```
* **`IndexOf`:** Finds the index of the first occurrence of a value in the array.
  ```csharp
  int[] arr = { 1, 2, 3, 4, 5 };
  int index = Array.IndexOf(arr, 3); // index will be 2
  ```
* **`Reverse`:** Reverses the order of elements in the array.
  ```csharp
  int[] arr = { 1, 2, 3, 4, 5 };
  Array.Reverse(arr); // arr will be { 5, 4, 3, 2, 1 }
  ```
* **`Sort`:** Sorts the elements of the array in ascending or descending order.
  ```csharp
  int[] arr = { 3, 1, 4, 2, 5 };
  Array.Sort(arr); // arr will be { 1, 2, 3, 4, 5 }
  ```
* **`Clear`:** Clears all elements from the array (resets it to an empty array).
  ```csharp
  int[] arr = { 1, 2, 3 };
  Array.Clear(arr, 0, arr.Length); // arr will be empty
  ```
* **`Copy`:** Copies elements from one array to another.
  ```csharp
  int[] sourceArray = { 1, 2, 3 };
  int[] destinationArray = new int[5];
  Array.Copy(sourceArray, destinationArray, sourceArray.Length);
  ```
* **`Exists`:** Checks if an element exists in the array.
  ```csharp
  int[] arr = { 1, 2, 3 };
  bool exists = Array.Exists(arr, x => x == 2); // exists will be true
  ```
* **`Find`:** Finds the first element that matches a specified condition.
  ```csharp
  int[] arr = { 1, 2, 3 };
  int value = Array.Find(arr, x => x > 2); // value will be 3
  ```
* **`FindAll`:** Finds all elements that match a specified condition.
  ```csharp
  int[] arr = { 1, 2, 3, 4, 5 };
  int[] evenNumbers = Array.FindAll(arr, x => x % 2 == 0); // evenNumbers will be { 2, 4 }
  ```
* **`FindIndex`:** Finds the index of the first element that matches a specified condition.
  ```csharp
  int[] arr = { 1, 2, 3 };
  int index = Array.FindIndex(arr, x => x > 2); // index will be 2
  ```
* **`TrueForAll`:** Checks if all elements in the array satisfy a specified condition.
  ```csharp
  int[] arr = { 1, 2, 3 };
  bool allPositive = Array.TrueForAll(arr, x => x > 0); // allPositive will be true
  ```
* **`BinarySearch`:** Searches for an element in a sorted array using binary search.
  ```csharp
  int[] arr = { 1, 2, 3, 4, 5 };
  int index = Array.BinarySearch(arr, 3); // index will be 2
  ```


3)**List Functions:**

* **`Add`:** Adds an element to the end of the list.
  ```csharp
  List<int> numbers = new List<int>();
  numbers.Add(1);
  numbers.Add(2);
  ```
* **`Remove`:** Removes an element from the list.
  ```csharp
  List<string> fruits = new List<string> { "apple", "banana", "orange" };
  fruits.Remove("banana");
  ```
* **`RemoveAt`:** Removes an element at a specific index.
  ```csharp
  List<int> numbers = new List<int> { 1, 2, 3 };
  numbers.RemoveAt(1); // Removes the element at index 1 (2)
  ```
* **`Clear`:** Removes all elements from the list.
  ```csharp
  List<string> fruits = new List<string> { "apple", "banana", "orange" };
  fruits.Clear();
  ```
* **`Count`:** Gets the number of elements in the list.
  ```csharp
  List<int> numbers = new List<int> { 1, 2, 3 };
  int count = numbers.Count; // count will be 3
  ```
* **`Contains`:** Checks if an element exists in the list.
  ```csharp
  List<string> fruits = new List<string> { "apple", "banana", "orange" };
  bool containsApple = fruits.Contains("apple"); // containsApple will be true
  ```
* **`IndexOf`:** Finds the index of the first occurrence of an element in the list.
  ```csharp
  List<int> numbers = new List<int> { 1, 2, 3, 2 };
  int index = numbers.IndexOf(2); // index will be 1
  ```
* **`LastIndexOf`:** Finds the index of the last occurrence of an element in the list.
  ```csharp
  List<int> numbers = new List<int> { 1, 2, 3, 2 };
  int index = numbers.LastIndexOf(2); // index will be 3
  ```
* **`Insert`:** Inserts an element at a specific index.
  ```csharp
  List<int> numbers = new List<int> { 1, 3 };
  numbers.Insert(1, 2); // Inserts 2 at index 1
  ```
* **`ToArray`:** Converts the list to an array.
  ```csharp
  List<int> numbers = new List<int> { 1, 2, 3 };
  int[] array = numbers.ToArray();
  ```
* **`GetRange`:** Gets a sublist from the current list.
  ```csharp
  List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };
  List<int> sublist = numbers.GetRange(1, 3); // Sublist will be { 2, 3, 4 }
  ```

4)**Dictionary Functions:**

* **`ContainsKey`:** Checks if a key exists in the dictionary.
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages["Alice"] = 25;
  bool containsAlice = ages.ContainsKey("Alice"); // containsKey will be true
  ```
* **`TryGetValue`:** Tries to retrieve the value associated with a key.
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages["Alice"] = 25;
  int age;
  bool success = ages.TryGetValue("Alice", out age); // success will be true, age will be 25
  ```
* **`Add`:** Adds a new key-value pair to the dictionary.
  ```csharp
  Dictionary<string, string> fruits = new Dictionary<string, string>();
  fruits.Add("apple", "red");
  ```
* **`Remove`:** Removes a key-value pair from the dictionary.
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages["Alice"] = 25;
  ages.Remove("Alice");
  ```
* **`Clear`:** Removes all key-value pairs from the dictionary.
  ```csharp
  Dictionary<string, string> fruits = new Dictionary<string, string>();
  fruits.Add("apple", "red");
  fruits.Clear();
  ```
* **`ContainsKey`:** Checks if a key exists in the dictionary.
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages["Alice"] = 25;
  bool containsAlice = ages.ContainsKey("Alice"); // containsKey will be true
  ```
* **`TryGetValue`:** Tries to retrieve the value associated with a key.
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages["Alice"] = 25;
  int age;
  bool success = ages.TryGetValue("Alice", out age); // success will be true, age will be 25
  ```
* **`Remove`:** Removes a key-value pair from the dictionary.
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages["Alice"] = 25;
  ages.Remove("Alice");
  ```

  
